name: CI/CD Pipeline (Workload Identity Federation)

# This workflow uses Google Cloud Workload Identity Federation for more secure authentication
# Comment out the other workflow (ci-cd.yml) if you want to use this one

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"
  # Add your Google Cloud project ID here
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # Workload Identity Provider
  WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  # Service Account email
  WIF_SERVICE_ACCOUNT: ${{ secrets.WIF_SERVICE_ACCOUNT }}

jobs:
  # Build and Test job runs on both PRs and main
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Cache npm dependencies for faster builds
      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            functions/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-npm-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-npm-

      # Cache TypeScript build output
      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: functions/lib
          key: ${{ runner.os }}-ts-build-${{ hashFiles('functions/src/**/*.ts', 'functions/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-ts-build-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        working-directory: ./functions
        run: npm ci

      - name: Install dependencies (cache hit)
        if: steps.npm-cache.outputs.cache-hit == 'true'
        working-directory: ./functions
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        working-directory: ./functions
        run: npm run lint

      - name: Build TypeScript
        working-directory: ./functions
        run: npm run build

      - name: Run tests
        working-directory: ./functions
        run: npm run test:coverage

      # Upload test coverage as artifact
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: functions/coverage/
          retention-days: 7

      # Cache built artifacts for deployment job
      - name: Cache build artifacts for deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/cache@v4
        with:
          path: |
            functions/lib
            functions/node_modules
          key: deploy-artifacts-${{ github.sha }}

  # Deploy job only runs on main branch pushes
  deploy:
    name: Deploy to Firebase
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.WIF_SERVICE_ACCOUNT }}

      # Setup gcloud CLI
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Restore build artifacts from previous job
      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            functions/lib
            functions/node_modules
          key: deploy-artifacts-${{ github.sha }}
          restore-keys: |
            deploy-artifacts-

      # If artifacts not found, rebuild
      - name: Install and build (fallback)
        if: failure()
        working-directory: ./functions
        run: |
          npm ci
          npm run build

      # Install Firebase CLI using npm with caching
      - name: Cache Firebase CLI
        uses: actions/cache@v4
        id: firebase-cli-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-firebase-cli-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-firebase-cli-

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Deploy to Firebase using gcloud auth
      - name: Deploy to Firebase
        run: |
          firebase deploy \
            --only functions,firestore,hosting \
            --project ${{ env.GCP_PROJECT_ID }} \
            --non-interactive

      # Optional: Add deployment status comment
      - name: Add deployment status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha.substring(0, 7);
            const message = `âœ… Successfully deployed to production (${sha})`;

            if (context.eventName === 'push') {
              // For direct pushes to main, create a commit status
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                description: message,
                context: 'deployment/production'
              });
            }
